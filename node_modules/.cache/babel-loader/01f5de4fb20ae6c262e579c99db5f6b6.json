{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mhmdz\\\\IdeaProjects\\\\React Projects\\\\reactdemo\\\\src\\\\components\\\\Achievement.js\";\nimport React, { Component } from \"react\";\nimport { Button, Card, Form } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons/faEdit\";\nimport { faPlusSquare, faUndo } from \"@fortawesome/free-solid-svg-icons\";\nimport Col from \"react-bootstrap/Col\";\nimport { faSave } from \"@fortawesome/free-solid-svg-icons/faSave\";\nimport { faList } from \"@fortawesome/free-solid-svg-icons/faList\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons/faPlus\";\nimport TaskList from \"./TaskList\";\nimport StudentRegisteredService from \"../services/StudentRegisteredService\";\nimport { AxiosInstance as axios } from \"axios\";\nexport default class Achievement extends Component {\n  constructor(props) {\n    super(props); //this.state = this.initialState\n\n    this.array = [];\n    this.initialState = {\n      id: '',\n      achievementYearHeading: '',\n      achievementImage: '',\n      achievementScores: {\n        achievementPara: ''\n      }\n    };\n    this.state = {\n      id: '',\n      achievementYearHeading: '',\n      achievementImage: '',\n      taskList: [{\n        index: Math.random(),\n        achievementScores: [this.para()]\n      }]\n    };\n\n    this.addNewRow = e => {\n      this.setState(prevState => ({\n        taskList: [...prevState.taskList, {\n          index: Math.random(),\n          achievementPara: \"\"\n        }]\n      }));\n    };\n\n    this.deleteRow = index => {\n      this.setState({\n        taskList: this.state.taskList.filter((s, sindex) => index !== sindex)\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const achievementData = {\n        achievementYearHeading: this.state.achievementYearHeading,\n        achievementImage: {\n          id: this.imageId\n        },\n        achievementScores: [this.para()]\n      };\n      StudentRegisteredService.createAchievement(achievementData).then(response => {\n        console.log(response);\n      }); // let data= {formData: this.state, userData: localStorage.getItem('user')}\n      // axios.post('http://localhost:8080/achievement/save', data).then(res=> {\n      //     console.log(res)\n      // })\n      // const achievementData = {\n      //     achievementYearHeading: this.state.achievementYearHeading,\n      //     achievementImage: this.imageId,\n      //     achievementScores: this.achievementPointsArray\n      // }\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    if ([\"achievementScores.achievementPara\", \"achievementImage.id\"].includes(e.target.name)) {\n      let taskList = [...this.state.taskList];\n      taskList[e.target.dataset.id][e.target.name] = e.target.value;\n      this.array1 = this.array.push(e.target.value);\n    } else {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    }\n  }\n\n  para() {\n    return statePara;\n  }\n\n  clickOnDelete(record) {\n    this.setState({\n      taskList: this.state.taskList.filter(r => r !== record)\n    });\n  }\n\n  onUploadImage(e) {\n    let image = e.target.files[0];\n    const formData = new FormData();\n    formData.append('file', image);\n    StudentRegisteredService.uploadFile(formData).then(response => {\n      if (response) {\n        this.imageId = response.data.id;\n        console.log(this.imageId);\n      }\n    });\n  }\n\n  render() {\n    let {\n      taskList\n    } = this.state;\n    const {\n      achievementYearHeading,\n      achievementImage\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border border-dark bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, \"Add Achievements\"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridachievementYearHeading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 37\n      }\n    }, \"Achievement Year Heading\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"Enter Achievement year...\",\n      required: true,\n      className: \"bg-dark text-white\",\n      autoComplete: \"off\",\n      value: achievementYearHeading,\n      onChange: this.handleChange,\n      name: \"achievementYearHeading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridachievementImage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 37\n      }\n    }, \"Upload Achievement Image\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"file\",\n      required: true,\n      className: \"bg-dark text-white\",\n      autoComplete: \"off\",\n      value: achievementImage,\n      onChange: e => this.onUploadImage(e) // onChange={this.twoMethod}\n      ,\n      name: \"achievementImage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 37\n      }\n    }, \"Enter Achievement Points\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TaskList, {\n      add: this.addNewRow,\n      delete: this.clickOnDelete.bind(this),\n      taskList: taskList,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(Card.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      variant: \"success\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 29\n      }\n    }, \"Submit\")))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mhmdz/IdeaProjects/React Projects/reactdemo/src/components/Achievement.js"],"names":["React","Component","Button","Card","Form","FontAwesomeIcon","faEdit","faPlusSquare","faUndo","Col","faSave","faList","faPlus","TaskList","StudentRegisteredService","AxiosInstance","axios","Achievement","constructor","props","array","initialState","id","achievementYearHeading","achievementImage","achievementScores","achievementPara","state","taskList","index","Math","random","para","addNewRow","e","setState","prevState","deleteRow","filter","s","sindex","handleSubmit","preventDefault","achievementData","imageId","createAchievement","then","response","console","log","bind","handleChange","includes","target","name","dataset","value","array1","push","statePara","clickOnDelete","record","r","onUploadImage","image","files","formData","FormData","append","uploadFile","data","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Button, Card, Form} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit} from \"@fortawesome/free-solid-svg-icons/faEdit\";\r\nimport {faPlusSquare, faUndo} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {faSave} from \"@fortawesome/free-solid-svg-icons/faSave\";\r\nimport {faList} from \"@fortawesome/free-solid-svg-icons/faList\";\r\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons/faPlus\";\r\nimport TaskList from \"./TaskList\";\r\nimport StudentRegisteredService from \"../services/StudentRegisteredService\";\r\nimport {AxiosInstance as axios} from \"axios\";\r\n\r\n\r\nexport default class Achievement extends Component {\r\n    imageId;\r\n    array= []\r\n    array1\r\n    constructor(props) {\r\n        super(props);\r\n        //this.state = this.initialState\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: '', achievementYearHeading: '', achievementImage: '', achievementScores: {\r\n            achievementPara:''\r\n        }\r\n    }\r\n\r\n    // state = {id: '', achievementYearHeading: '', achievementImage: '',\r\n    //     taskList: [{index: Math.random(),\r\n    //         achievementScores: [{\r\n    //         achievementPara:\"\"\r\n    //         }]} ],\r\n    // }\r\n\r\n    state = {id: '', achievementYearHeading: '', achievementImage: '',\r\n        taskList: [{index: Math.random(),\r\n            achievementScores: [this.para()]\r\n        }]\r\n    }\r\n\r\n\r\n    handleChange(e) {\r\n        if ([\"achievementScores.achievementPara\", \"achievementImage.id\"].includes(e.target.name)) {\r\n            let taskList = [...this.state.taskList]\r\n            taskList[e.target.dataset.id][e.target.name] = e.target.value;\r\n             this.array1=this.array.push(e.target.value)\r\n        } else {\r\n            this.setState({[e.target.name]: e.target.value})\r\n        }\r\n    }\r\n\r\n    addNewRow = (e) => {\r\n        this.setState((prevState) => ({\r\n            taskList: [...prevState.taskList, {index: Math.random(), achievementPara: \"\"}]\r\n        }));\r\n    }\r\n\r\n    deleteRow = (index) => {\r\n        this.setState({\r\n            taskList: this.state.taskList.filter((s, sindex) => index !== sindex),\r\n        });\r\n    }\r\n\r\n    para(){\r\n        return statePara \r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const achievementData = {\r\n            achievementYearHeading: this.state.achievementYearHeading,\r\n            achievementImage: {\r\n                id: this.imageId\r\n            },\r\n            achievementScores: [\r\n                this.para()\r\n            ]\r\n\r\n\r\n        }\r\n\r\n        StudentRegisteredService.createAchievement(achievementData)\r\n            .then(response => {\r\n                console.log(response)\r\n            })\r\n        // let data= {formData: this.state, userData: localStorage.getItem('user')}\r\n        // axios.post('http://localhost:8080/achievement/save', data).then(res=> {\r\n        //     console.log(res)\r\n        // })\r\n        // const achievementData = {\r\n        //     achievementYearHeading: this.state.achievementYearHeading,\r\n        //     achievementImage: this.imageId,\r\n        //     achievementScores: this.achievementPointsArray\r\n        // }\r\n    }\r\n\r\n\r\n\r\n    clickOnDelete(record) {\r\n        this.setState({\r\n            taskList: this.state.taskList.filter(r => r !== record)\r\n        })\r\n    }\r\n\r\n    onUploadImage(e) {\r\n        let image = e.target.files[0];\r\n        const formData = new FormData();\r\n        formData.append('file', image);\r\n        StudentRegisteredService.uploadFile(formData)\r\n            .then(response => {\r\n                if (response) {\r\n                    this.imageId = response.data.id;\r\n                    console.log(this.imageId)\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        let {taskList} = this.state\r\n        const {achievementYearHeading, achievementImage } = this.state\r\n\r\n        return (\r\n            <div className=\"content\">\r\n                <Card className={\"border border-dark bg-dark text-white\"}>\r\n                    <Card.Header>Add Achievements</Card.Header>\r\n                    <Form onSubmit={this.handleSubmit} onChange={this.handleChange}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridachievementYearHeading\">\r\n                                    <Form.Label>Achievement Year Heading</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Achievement year...\" required\r\n                                                  className={\"bg-dark text-white\"}\r\n                                                  autoComplete=\"off\"\r\n                                                  value={achievementYearHeading}\r\n                                                  onChange={this.handleChange}\r\n                                                  name=\"achievementYearHeading\"/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridachievementImage\">\r\n                                    <Form.Label>Upload Achievement Image</Form.Label>\r\n                                    <Form.Control type=\"file\" required\r\n                                                  className={\"bg-dark text-white\"}\r\n                                                  autoComplete=\"off\"\r\n                                                  value={achievementImage}\r\n                                                  onChange={(e) => this.onUploadImage(e)}\r\n                                                  // onChange={this.twoMethod}\r\n                                                  name=\"achievementImage\"/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                <tr>\r\n                                    <th>Enter Achievement Points</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                <TaskList add={this.addNewRow} delete={this.clickOnDelete.bind(this)}\r\n                                          taskList={taskList} onChange={this.handleChange}/>\r\n                                </tbody>\r\n                            </table>\r\n\r\n\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button size=\"sm\" variant=\"success\" type=\"submit\">Submit\r\n                            </Button>\r\n\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}